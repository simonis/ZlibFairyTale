<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

  <head>
    <meta charset="utf-8" />

    <title>A fairy tale of zlib/zip compression in OpenJDK</title>

    <meta name="description" content="A fairy tale of zlib/zip compression in OpenJDK" />
    <meta name="author" content="Volker H. Simonis" />

    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />

    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, minimal-ui" />

    <link rel="stylesheet" href="reveal.js/css/reveal.css" />
    <link rel="stylesheet" href="reveal.js/css/theme/joker2017.css" id="theme" />

    <!-- Code syntax highlighting -->
    <link rel="stylesheet" href="reveal.js/lib/css/monokai_sublime.css" />

  <style type="text/css">
.scrollable {
    bottom: 0px;
    overflow-y: auto  !important;
    overflow-x: hidden !important;
}

.reveal .slides > section.demo,
.reveal .slides > section > section.demo {
    padding: 0;
}

.reveal .big {
    font-size: .8em;
    line-height: 1.3em;
}

.reveal pre.console {
    background-color: black;
    color: #00ff00;
}

code.terminal .hljs-title {
    color: #00ff00;
}

/* Used for styling command lines in a 'java' code block */
code.java .hljs-title-terminal {
    color: #00ff00;
}

.reveal pre.noshadow {
    border-radius: 0;
    box-shadow: unset;
}

.reveal pre code {
    max-height: 100%;
}
.bold {
    font-weight: bold;
}

.reveal .outline_white {
    color: white;
    text-shadow:
        -2px -2px 0 #000,
         2px -2px 0 #000,
        -2px  2px 0 #000,
         2px  2px 0 #000;
    min-height: 1.1em;
    text-align: center;
}
.reveal .outline_black {
    color: black;
    text-shadow:
        -2px -2px 0 #fff,
         2px -2px 0 #fff,
        -2px  2px 0 #fff,
         2px  2px 0 #fff;
    min-height: 1.1em;
    text-align: center;
}

.reveal .slide-number {
    position: fixed;
    display: block;
    left: 15px;
    bottom: 15px;
    opacity: 0.9;
    z-index: 31;
    font-size: 14px;
    text-align: center;
}
.reveal h1, .reveal h2, .reveal h3, .reveal h4, .reveal h5, .reveal h6 {
    text-transform: none;
}

.hljs-class .hljs-title {
    /* fix "public static class Y extends X {" such that 'Y' will be formatted the same like 'X' */
    color: #A6E22E;
    font-style: italic;
}

mark {
    color: black;
    background-color: lightyellow;
    border-radius: 10px;
}
mark.orange {
    color: black;
    background-color: orange;
    border-radius: 10px;
}
mark.border {
    color: inherit;
    background-color: inherit;
    border: 5px solid #1B91FF;
    /* Use a negative margin with the same size as the border to avoid size changes of elemnts with borders or when the border is set dynamically by fragments */
    margin: 0 -5px 0 -5px;
    border-radius: 10px;
}
mark.border-no-top {
    color: inherit;
    background-color: inherit;
    margin: 0 -5px 0 -5px;
    border-style: solid;
    border-color: #1B91FF;
    border-width: 0px 5px 5px 5px;
    border-radius: 0px 0px 10px 10px;
}
mark.border-no-bottom {
    color: inherit;
    background-color: inherit;
    margin: 0 -5px 0 -5px;
    border-style: solid;
    border-color: #1B91FF;
    border-width: 5px 5px 0px 5px;
    border-radius: 10px 10px 0px 0px;
}

.reveal .slides section .fragment.highlight-border, .reveal .slides section .fragment.highlight-current-border {
  opacity: 1;
  visibility: visible;
  /* Define a transparent border with the same size for inactive fragments such that we have no size changes when the fragments get displayed */
  border-width: 3px 3px 3px 3px;
  border-style: solid;
  border-color: transparent;
  /* Use a negative margin with the same size as the border to avoid size changes of elemnts with borders or when the border is set dynamically by fragments */
  margin: -3px;
}
.reveal .slides section .fragment.highlight-border.visible {
  border: 3px solid #1B91FF;
  border-radius: 10px;
  margin: 3px -3px 3px -3px;
}
.reveal .slides section .fragment.highlight-current-border.current-fragment {
  border: 3px solid #1B91FF;
  border-radius: 10px;
  margin: -3px;
}
.reveal .slides section .fragment.highlight-current-border.red.current-fragment {
  border: 3px solid #F00;
  border-radius: 10px;
  margin: -3px;
}
.reveal .slides section .fragment.highlight-current-border.border-no-top.current-fragment {
  border-style: solid;
  border-color: transparent #1B91FF #1B91FF #1B91FF;
  border-width: 3px;
  border-radius: 0px 0px 10px 10px;
  margin: -3px;
}
.reveal .slides section .fragment.highlight-current-border.border-no-bottom.current-fragment {
  border-style: solid;
  border-color: #1B91FF #1B91FF transparent #1B91FF;
  border-width: 3px;
  border-radius: 10px 10px 0px 0px;
  margin: -3px;
}
.reveal .slides section .fragment.highlight-current-border.border-no-bottom-top.current-fragment {
  border-style: solid;
  border-color: transparent #1B91FF transparent #1B91FF;
  border-width: 3px;
  border-radius: 0px 0px 0px 0px;
  margin: -3px;
}


  table.calling_hirarchy {
/*    font-family: monospace, arial, helvetica, sans-serif; */
/*    background-color: #ffffff; */
    font-size: smaller;
    border-collapse: collapse;
    margin: 0px auto;
    padding: 2px;
    width: auto;
    overflow: auto;
    border: none;
  }

  table.calling_hirarchy tr {
    border: none;
  }

  table.calling_hirarchy td {
    padding: 4px;
/*    font-family: monospace; */
  }

  td.indent_level_0 {
    border-style: solid;
    border-width: 2px;
    background-color: #a0a0a0;
  }
  td.indent_level_1 {
    border-style: solid;
    border-width: 2px;
    background-color: #a8a8a8;
  }
  td.indent_level_2 {
    border-style: solid;
    border-width: 2px;
    background-color: #b0b0b0;
  }
  td.indent_level_3 {
    border-style: solid;
    border-width: 2px;
    background-color: #b8b8b8;
  }
  td.indent_level_4 {
    border-style: solid;
    border-width: 2px;
    background-color: #c0c0c0;
  }
  td.indent_level_5 {
    border-style: solid;
    border-width: 2px;
    background-color: #c8c8c8;
  }
  td.indent_level_6 {
    border-style: solid;
    border-width: 2px;
    background-color: #d0d0d0;
  }
  td.indent_level_7 {
    border-style: solid;
    border-width: 2px;
    background-color: #d8d8d8;
  }
  td.indent_level_8 {
    border-style: solid;
    border-width: 2px;
    background-color: #e0e0e0;
  }
  td.indent_level_9 {
    border-style: solid;
    border-width: 2px;
    background-color: #e8e8e8;
  }
  td.indent_level_10 {
    border-style: solid;
    border-width: 2px;
    background-color: #f0f0f0;
  }
  td.indent_level_11 {
    border-style: solid;
    border-width: 2px;
    background-color: #f8f8f8;
  }
  td.indent_level_12 {
    border-style: solid;
    border-width: 2px;
    background-color: #ffffff;
  }
  td.functionCall {
/*    font-weight: bold; */
    color: darkblue;
  }
  td.javaCall {
    font-weight: bold;
    color: darkgreen;
  }
  td.comment {
    font-style: italic;
    color: maroon;
  }
  td.highlight {
    border-style: solid;
    border-width: 2px;
    background-color: #a0ffa0;
  }
  table.calling_hirarchy td[rowspan] {
    border-style: none;
    border-width: 0;
    border-left: dotted;
    border-left-width: 2px;
  }

/* The Quiz (background) */
.reveal .slides section .quiz {
    display: none; /* Hidden by default */
}

.reveal .slides section .fragment.quiz {
    display: none; /* Hidden by default */
}

.reveal .slides section .fragment.quiz.current-fragment {
    display: block;
    position: fixed; /* Stay in place */
    z-index: 1; /* Sit on top */
    padding-top: 100px; /* Location of the box */
    left: 0;
    top: 0;
    width: 100%; /* Full width */
    height: 100%; /* Full height */
    overflow: auto; /* Enable scroll if needed */
}

/* Quiz Content */
.reveal .slides section .quiz-content {
    display: inline-block;
    position: relative;
    background-color: #fefefe;
    margin: auto;
    padding: 0;
    border: 1px solid #888;
    width: auto;
    box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);
    -webkit-animation-name: animatetop;
    -webkit-animation-duration: 0.4s;
    animation-name: animatetop;
    animation-duration: 0.4s
}

/* Add Animation */
@-webkit-keyframes animatetop {
    from {top:-300px; opacity:0}
    to {top:0; opacity:1}
}

@keyframes animatetop {
    from {top:-300px; opacity:0}
    to {top:0; opacity:1}
}

.reveal .slides section .quiz-header {
    padding: 12px 12px;
    background-color: #7571ff;
/*  background-color: #5cb85c; */
    color: white;
}

.reveal .slides section .quiz-header h2 {
    margin: 0;
}

.reveal .slides section .quiz-body {
    padding: 12px 16px;
    color: #3f3f3f;
}

.reveal .slides section .quiz-body li:not(:last-child) {
    margin-bottom: 15px;
}

.reveal .slides section .quiz-footer {
    padding: 12px 16px;
    background-color: #7571ff;
/*  background-color: #5cb85c; */
    color: white;
}

.reveal .left-footer {
    display: block;
    position: fixed;
    z-index: 30;
    left: 15px;
    bottom: 15px;
    font-size: 12px;
    color: #eee8d5;
}

ul.before::before {
    content:attr(data-header);
    font-size:120%;
    font-weight:bold;
    margin-left: -2ex;
}
pre.after.small::after {
    content:attr(data-footer);
    font-size: 0.5em;
    font-family: "Roboto Condensed", "sans-serif";
}
</style>

    <!-- Printing and PDF exports -->
    <script>
      var link = document.createElement( 'link' );
      link.rel = 'stylesheet';
      link.type = 'text/css';
      link.href = window.location.search.match( /print-pdf/gi ) ? 'reveal.js/css/print/pdf.css' : 'reveal.js/css/print/paper.css';
      document.getElementsByTagName( 'head' )[0].appendChild( link );
    </script>

    <!--[if lt IE 9]>
    <script src="reveal.js/lib/js/html5shiv.js"></script>
    <![endif]-->

    <!--
      Issue #1105: Keyboard shortcut to skip forward/back over fragments #1173
      https://github.com/hakimel/reveal.js/pull/1173
    -->
  </head>

<!--
;; indent block of text
;; C-u <number> C-x <TAB>



;; select this code and do 'M-x eval-region'
(defun make-fragment (p1 p2)
  "Wraps the selection into 'fragment' <span>s and quotes '&', '<' and '>'."
  (interactive "r")
  (setq inputStr (buffer-substring-no-properties p1 p2))
  (setq inputStr (replace-regexp-in-string "&" "&amp;" inputStr))
  (setq inputStr (replace-regexp-in-string "<" "&lt;" inputStr))
  (setq inputStr (replace-regexp-in-string ">" "&gt;" inputStr))
  (setq resultStr (concat "<span class=\"fragment\">" (concat inputStr "</span>")))
  (delete-region p1 p2)
  (insert resultStr)
)
(defun make-fragment-simple (p1 p2)
  "Wraps the selection into 'fragment' <span>s without any quoting."
  (interactive "r")
  (setq inputStr (buffer-substring-no-properties p1 p2))
  (setq resultStr (concat "<span class=\"fragment\">" (concat inputStr "</span>")))
  (delete-region p1 p2)
  (insert resultStr)
)
(defun quote-fragment (p1 p2)
  "Quotes '&', '<' and '>'."
  (interactive "r")
  (setq inputStr (buffer-substring-no-properties p1 p2))
  (setq inputStr (replace-regexp-in-string "&" "&amp;" inputStr))
  (setq inputStr (replace-regexp-in-string "<" "&lt;" inputStr))
  (setq inputStr (replace-regexp-in-string ">" "&gt;" inputStr))
  (delete-region p1 p2)
  (insert inputStr)
)

(global-set-key (kbd "C-f") 'make-fragment)
(global-set-key (kbd "C-S-f") 'make-fragment-simple)
(global-set-key (kbd "C-S-q") 'quote-fragment)
;; revert key-binding
;; (global-set-key (kbd "C-f") 'forward-char)
;;
;; use 'C-h k <keystroke>' to find out what <keystroke> ia currently bound to

;; (vhs) The following is required to make 'C-c C-t' insert <code> tags without
;; newlines. 'sgml-tag-alist' is the "file-local" version of 'html-tag-alist'
(add-to-list 'html-tag-alist '("code"))
(add-to-list 'sgml-tag-alist '("code"))

-->

  <body>

    <div class="reveal">


    <div class="left-footer">
       <object data="images/AWS_transparent.png" alt="AWS logo" type="image/png" style="vertical-align: middle; width: 40px; margin: 0 10px 0 0;"/>
       <span>© 2022, Amazon Web Services, Inc. or its affiliates. All rights reserved.</span>
    </div>

      <!-- Any section element inside of this container is displayed as a slide -->
      <div class="slides">

        <section data-background="images/background_title.jpg" style="text-align: left;">
          <p style="margin-bottom : 6em;"></p>
          <h1>A fairy tale of zlib/zip <br/> compression in OpenJDK</h1>
          <p>
            Volker Simonis (<a href="https://twitter.com/volker_simonis">@volker_simonis</a>)<br/>
            Principal Software Engineer<br/>
            AWS
          </p>
        </section>

        <section data-background="images/background_default.jpg">
          <h2 style="text-transform: none;">
            <a href="https://simonis.github.io/EclipseCon2022/" style="color: inherit;">https://simonis.github.io/EclipseCon2022/</a>
          </h2>
        </section>

        <section data-background="images/background_default.jpg">
          <h1>About me</h1>

          <ul class="before" data-header="Present:" style="width: 60%;">
            <li>Principal Software Engineer @ Amazon Corretto</li>
            <li>OpenJDK Member, Committer &amp; Reviewer</li>
            <li>OpenJDK Build, Hotspot, Porters &amp; Vulnerability Group</li>
            <li>OpenJDK Governing Board</li>
            <li>Java Community Process Executive Committee</li>
          </ul>

          <ul class="before" data-header="Past:" style="width: 60%;">
            <li>SAP JVM and SapMachine @ SAP</li>
            <li>OpenJDK Build PowerPC/AIX &amp; s390x Project Lead </li>
            <li>JCP Expert Groups for Java SE 9 to 13</li>
            <li class="fragment"><a href="https://events.eclipse.org/2011/europe/">EclipseCon 2011</a>:
              <a href="http://www.progdoc.de/papers/EclipseCon2011/EclipseCon2011.html">How to Contribute to the OpenJDK</a>
            </li>
          </ul>
        </section>

        <section data-background="images/background_default.jpg">
          <h1>About zlib/zip/Deflate</h1>

          <ul>
            <li>Deflate: compression algorithm (<a href="https://www.rfc-editor.org/rfc/rfc1951">RFC 1951</a>)
              <ul>
                <li>Uses LZ77 (Lempel-Zip) and Huffman Coding</li>
              </ul>
            </li>
            <li class="fragment">zlib (<a href="https://www.zlib.net/">https://www.zlib.net</a>):
              <ul>
                <li>Library by Jean-loup Gailly &amp; Mark Adler (1995)</li>
                <li>Compressed data format (<a href="https://www.rfc-editor.org/rfc/rfc1950">RFC 1950</a>)
                  <ul>
                    <li>Deflate stream with Adler32 checksum)</li>
                  </ul>
                </li>
              </ul>
            </li>
            <li class="fragment">Gzip: compressed file format, single file (<a href="https://www.rfc-editor.org/rfc/rfc1952">RFC 1952</a>)
              <ul>
                <li>Uses Deflate compression and CRC32 checksum</li>
              </ul>
            </li>
            <li class="fragment">Zip: compressed file format, multiple files
              <ul>
                <li>Supports additionl compression algorithms</li>
              </ul>
            </li>
          </ul>
        </section>

        <section>

          <section data-background="images/background_default.jpg">
            <h1>zlib/zip in Java&#8482;</h1>

            <ul class="before" data-header="JDK 1.0 (1996):" style="width: 60%;">
              <li>Supported class loading from <em>uncompressed</em> zip files</li>
            </ul>
            <ul class="before fragment" data-header="JDK 1.1 (1997):" style="width: 60%;">
              <li>Support for compressed zip files</li>
              <li>Introduced the <code>java.util.zip</code> package
                <ul>
                  <li>Implemented with JNI wrapper on top of zlib 1.0.4</li>
                </ul>
              </li>
              <li>Introduced the JAR file format</li>
            </ul>
            <ul class="before fragment" data-header="JDK 1.2 (1998):" style="width: 60%;">
              <li>Added the <code>java.util.jar</code> package</li>
            </ul>
            <ul class="before fragment" data-header="JDK 7 (2011):" style="width: 60%;">
              <li>Added <a href="https://docs.oracle.com/javase/7/docs/technotes/guides/io/fsp/zipfilesystemprovider.html">Zip File System Provider</a>
                (<a href="https://bugs.openjdk.org/browse/JDK-6990846">JDK-6990846</a>)</li>
            </ul>
          </section>

          <section data-background="images/background_default.jpg">
            <h1>zlib/zip in Java&#8482;</h1>

            <div style="display: inline-block;">
              <p style="padding: 0 15px; text-align: left;">Changelog from a <a href="https://www.oracle.com/java/technologies/oracle-java-archive-downloads.html">historic JDK version</a>:</p>

              <pre class="big noshadow" data-trim="true">
                <code style="background: #93a1a1; color: #000;" class="text" data-trim="true" data-noescape="true">
Changes from <mark class="border">JDK 1.1beta3 to JDK 1.1_Final</mark>
...
JAR CHANGE - <mark class="border">Can now handle compressed JAR files</mark> in the CLASSPATH

java.util.zip.ZipFile was enhanced so that it can now handle
compressed ZIP/JAR file entries. No changes to the API were made.
With this change, compressed JAR/ZIP files can now be handled
by javac.

Additionally, the runtime has also changed so that it can now
handle compressed ZIP/JAR files that are specified in the CLASSPATH.
                </code>
              </pre>
            </div>

          </section>

          <section data-background="images/background_default.jpg">
            <h1>zlib/zip in OpenJDK</h1>

            <ul>
              <li>Implemented via JNI calls into zlib
                <ul>
                  <li>JNI overhead small compared to inflate/deflate</li>
                  <li>Can be an issue for standalone CRC32 and Adler32 usage</li>
                  <li>Fixed by intrinsification of CRC32
                    (<a href="https://bugs.openjdk.java.net/browse/JDK-7088419">JDK-7088419</a>)
                    and Adler32 (<a href="https://bugs.openjdk.java.net/browse/JDK-8139043">JDK-8139043</a>)
                  </li>
                </ul>
              </li>
              <li class="fragment">Zip file support was implemented in C using <code>mmap()</code>
                <ul>
                  <li>Could lead to crashes if .jar/.zip file was concurrently modified</li>
                  <li>Mitigated by <a href="http://hg.openjdk.java.net/jdk7/jdk7/jdk/rev/ee385b4e2ffb"><code>-Dsun.zip.disableMemoryMapping</code></a>
                    in JDK 5u71/6u23
                  </li>
                  <li>Fixed in JDK 9 by re-implementing zip file support in pure Java
                    (<a href="https://bugs.openjdk.java.net/browse/JDK-8145260">JDK-8145260</a>)
                  </li>
                  <li>Resulted in nice performance boost (see <a href="https://cl4es.github.io/">C. Redestad</a>'s blog on
                    "<a href="">Zip lookups</a>")
                  </li>
                </ul>
              </li>
            </ul>

          </section>

        </section>

        <section>

          <section data-background="images/background_default.jpg">
            <h1>Deflate / LZ77</h1>

            <ul style="list-style-type: none;">
              <li style="margin-bottom: 1ex;">Dictionary based, sliding window (32k) compression</li>
              <li class="fragment" data-fragment-index="1">Example 1:<br/>
                <pre class="big noshadow" data-trim="true">
                  <code class="cpp" data-trim="true" data-noescape="true">
<span class="fragment" data-fragment-index="1"> input: <span class="fragment highlight-current-border" data-fragment-index="5">bla</span>bla!                              
        <span class="fragment current-visible" data-fragment-index="2">^</span><span class="fragment current-visible" data-fragment-index="3">^</span><span class="fragment current-visible" data-fragment-index="4">^</span><span class="fragment current-visible" data-fragment-index="5">^</span>  <span class="fragment current-visible" data-fragment-index="6">^</span>
<span class="fragment" data-fragment-index="1">output: </span><span class="fragment" data-fragment-index="2">b</span><span class="fragment" data-fragment-index="3">l</span><span class="fragment" data-fragment-index="4">a</span><span class="fragment" data-fragment-index="5">[3,3]</span><span class="fragment" data-fragment-index="6">!</span></span>
                  </code>
                </pre>
              </li>
              <li class="fragment" data-fragment-index="7">Example 2 (only match patterns >= 3):<br/>
                <pre class="big noshadow" data-trim="true">
                  <code class="cpp" data-trim="true" data-noescape="true">
 input: <span class="fragment highlight-current-border" data-fragment-index="14">a<span class="fragment highlight-current-border" data-fragment-index="11">bc</span></span>bcdabcda                          
        <span class="fragment current-visible" data-fragment-index="8">^</span><span class="fragment current-visible" data-fragment-index="9">^</span><span class="fragment current-visible" data-fragment-index="10">^</span><span class="fragment current-visible" data-fragment-index="11">^</span><span class="fragment current-visible" data-fragment-index="12">^</span><span class="fragment current-visible" data-fragment-index="13">^</span><span class="fragment current-visible" data-fragment-index="14">^</span><span class="fragment current-visible" data-fragment-index="15">  ^</span><span class="fragment current-visible" data-fragment-index="16">^</span>
output: <span class="fragment" data-fragment-index="8">a</span><span class="fragment" data-fragment-index="9">b</span><span class="fragment" data-fragment-index="10">c</span><span class="fragment" data-fragment-index="11">b</span><span class="fragment" data-fragment-index="12">c</span><span class="fragment" data-fragment-index="13">d</span><span class="fragment" data-fragment-index="14">[6,3]</span><span class="fragment" data-fragment-index="15">d</span><span class="fragment" data-fragment-index="16">a</span>
                  </code>
                </pre>
              </li>
              <li class="fragment" data-fragment-index="17">Example 3 (ambiguous matches):<br/>
                <pre class="big noshadow" data-trim="true">
                  <code class="cpp" data-trim="true" data-noescape="true">
 input: <span class="fragment highlight-current-border" data-fragment-index="24">a<span class="fragment highlight-current-border" data-fragment-index="21">bc</span></span>bcda<span class="fragment highlight-current-border red" data-fragment-index="24"><span class="fragment highlight-current-border" data-fragment-index="25">bcda</span></span>                          
        <span class="fragment current-visible" data-fragment-index="18">^</span><span class="fragment current-visible" data-fragment-index="19">^</span><span class="fragment current-visible" data-fragment-index="20">^</span><span class="fragment current-visible" data-fragment-index="21">^</span><span class="fragment current-visible" data-fragment-index="22">^</span><span class="fragment current-visible" data-fragment-index="23">^</span><span class="fragment current-visible" data-fragment-index="24">^</span><span class="fragment current-visible" data-fragment-index="25">^</span>
output: <span class="fragment" data-fragment-index="18">a</span><span class="fragment" data-fragment-index="19">b</span><span class="fragment" data-fragment-index="20">c</span><span class="fragment" data-fragment-index="21">b</span><span class="fragment" data-fragment-index="22">c</span><span class="fragment" data-fragment-index="23">d</span><span class="fragment" data-fragment-index="24">a</span><span class="fragment" data-fragment-index="25">[4,4]</span><span class="fragment" data-fragment-index="26"></span>
                  </code>
                </pre>
              </li>
            </ul>
<!--
 input: blabla!
        ^^^^  ^
output: bla[3,3]!

 input: abcbcdabcda
        ^^^^^^^  ^
output: abcbcd[6,3]da

 input: abcbcdabcda
        ^^^^^^^^
output: abcbcda[4,4]
-->
          </section>

          <section data-background="images/background_default.jpg">
            <h2>Deflate / Huffman Coding</h2>

            <pre class="big noshadow after small" data-trim="true" data-footer="Adapted from: https://en.wikipedia.org/wiki/Huffman_coding">
              <code class="cpp" data-trim="true" data-noescape="true">
input: a<span class="fragment highlight-current-border" data-fragment-index="20">_</span>dead<span class="fragment highlight-current-border" data-fragment-index="20">_</span>dad<span class="fragment highlight-current-border" data-fragment-index="20">_</span><span class="fragment  highlight-current-border" data-fragment-index="1">c</span>eded<span class="fragment highlight-current-border" data-fragment-index="20">_</span>a<span class="fragment highlight-current-border" data-fragment-index="20">_</span><span class="fragment  highlight-current-border" data-fragment-index="2">b</span>ad<span class="fragment highlight-current-border" data-fragment-index="20">_</span><span class="fragment  highlight-current-border" data-fragment-index="2">b</span>a<span class="fragment  highlight-current-border" data-fragment-index="2">b</span>e<span class="fragment highlight-current-border" data-fragment-index="20">_</span>a<span class="fragment highlight-current-border" data-fragment-index="20">_</span><span class="fragment  highlight-current-border" data-fragment-index="2">b</span>eaded<span class="fragment highlight-current-border" data-fragment-index="20">_</span>a<span class="fragment  highlight-current-border" data-fragment-index="2">b</span>a<span class="fragment  highlight-current-border" data-fragment-index="1">c</span>a<span class="fragment highlight-current-border" data-fragment-index="20">_</span><span class="fragment  highlight-current-border" data-fragment-index="2">b</span>ed

      <span class="fragment" data-fragment-index="12"><span class="fragment highlight-current-border" data-fragment-index="13">0</span></span>                                                      <span class="fragment" data-fragment-index="13">c: 0000</span>
c:<span class="fragment" data-fragment-index="1">02</span> <span class="fragment" data-fragment-index="4">---+</span>     <span class="fragment" data-fragment-index="11"><span class="fragment highlight-current-border" data-fragment-index="13"><span class="fragment highlight-current-border" data-fragment-index="14">0</span></span></span>                                              <span class="fragment" data-fragment-index="14">b: 0001</span>
      <span class="fragment" data-fragment-index="12"><span class="fragment highlight-current-border" data-fragment-index="14">1</span></span> <span class="fragment" data-fragment-index="4">|-- cb:08</span> <span class="fragment" data-fragment-index="5">--+</span>                                        <span class="fragment" data-fragment-index="15">e: 001</span>
b:<span class="fragment" data-fragment-index="2">06</span> <span class="fragment" data-fragment-index="4">---+</span>           <span class="fragment" data-fragment-index="5">|</span>     <span class="fragment" data-fragment-index="10"><span class="fragment highlight-current-border" data-fragment-index="13"><span class="fragment highlight-current-border" data-fragment-index="14"><span class="fragment highlight-current-border" data-fragment-index="15">0</span></span></span></span>                                  <span class="fragment" data-fragment-index="16">a: 01</span>
              <span class="fragment" data-fragment-index="11"><span class="fragment highlight-current-border" data-fragment-index="15">1</span></span>     <span class="fragment" data-fragment-index="5">|-- ecb:15</span> <span class="fragment" data-fragment-index="7">--+</span>                           <span class="fragment" data-fragment-index="17"><span class="fragment highlight-current-border" data-fragment-index="20">_: 10</span></span>
e:<span class="fragment" data-fragment-index="3">07</span> <span class="fragment" data-fragment-index="5">---------------+</span>            <span class="fragment" data-fragment-index="7">|</span>      <span class="fragment" data-fragment-index="9"><span class="fragment highlight-current-border" data-fragment-index="13"><span class="fragment highlight-current-border" data-fragment-index="14"><span class="fragment highlight-current-border" data-fragment-index="15"><span class="fragment highlight-current-border" data-fragment-index="16">0</span></span></span></span></span>                    <span class="fragment" data-fragment-index="18">d: 11</span>
                          <span class="fragment" data-fragment-index="10"><span class="fragment highlight-current-border" data-fragment-index="16">1</span></span>      <span class="fragment" data-fragment-index="7">|-- aecb:26</span> <span class="fragment" data-fragment-index="8">--+</span>
a:<span class="fragment" data-fragment-index="3">11</span> <span class="fragment" data-fragment-index="7">----------------------------+</span>             <span class="fragment" data-fragment-index="8">|</span>
      <span class="fragment" data-fragment-index="12"><span class="fragment highlight-current-border" data-fragment-index="17">0</span></span>                                        <span class="fragment" data-fragment-index="8">|-- _daecb:46</span>
_:<span class="fragment" data-fragment-index="3">10</span> <span class="fragment" data-fragment-index="6">---+</span>                               <span class="fragment" data-fragment-index="9"><span class="fragment highlight-current-border" data-fragment-index="17"><span class="fragment highlight-current-border" data-fragment-index="18">1</span></span></span>      <span class="fragment" data-fragment-index="8">|</span>
      <span class="fragment" data-fragment-index="12"><span class="fragment highlight-current-border" data-fragment-index="18">1</span></span> <span class="fragment" data-fragment-index="6">|-- _d:20</span> <span class="fragment" data-fragment-index="8">-----------------------------+</span>
d:<span class="fragment" data-fragment-index="3">10</span> <span class="fragment" data-fragment-index="6">---+</span>

<span class="fragment" data-fragment-index="19">01 <span class="fragment highlight-current-border" data-fragment-index="20">10</span> 11 001 01 11 <span class="fragment highlight-current-border" data-fragment-index="20">10</span> 11 01 11 <span class="fragment highlight-current-border" data-fragment-index="20">10</span> 0000 001 11 001 11 <span class="fragment highlight-current-border" data-fragment-index="20">10</span> 01 <span class="fragment highlight-current-border" data-fragment-index="20">10</span> 0001 01 11 <span class="fragment highlight-current-border" data-fragment-index="20">10</span> 0001
01 0001 001 <span class="fragment highlight-current-border" data-fragment-index="20">10</span> 01 <span class="fragment highlight-current-border" data-fragment-index="20">10</span> 0001 0001 01 11 001 11 <span class="fragment highlight-current-border" data-fragment-index="20">10</span> 01 0001 01 0000 01 <span class="fragment highlight-current-border" data-fragment-index="20">10</span> 0001 001 11</span><span class="fragment" data-fragment-index="21"></span>
              </code>
            </pre>
<div style="display: none;">
input: a_dead_dad_ceded_a_bad_babe_a_beaded_abaca_bed

      0                                             c: 0000
c:02 ---+     0                                     b: 0001
      1 |-- cb:08 --+                               e: 001
b:06 ---+           |     0                         a: 01
              1     |-- ecb:15 --+                  _: 10
e:07 ---------------+            |      0           d: 11
                          1      |-- aecb:26 --+
a:11-----------------------------+             |
      0                                        |-- _daecb:46
_:10 ---+                               1      |
      1 |-- _d:20 -----------------------------+
d:10 ---+

01 10 11 001 01 11 10 11 01 11 10 0000 001 11 001 11 10 01 10 0001 01 11 10 0001
01 0001 001 10 01 10 0001 0001 01 11 001 11 10 01 0001 01 0000 01 10 0001 001 11
</div>
          </section>

          <section data-background="images/background_default.jpg">
            <h2>Deflate - Combining LZ77 &amp; Huffman </h2>

            <ul>
              <li>LZZ requires a tag (bit) to distinguish literals from distance/length</li>
              <li>Deflate conceptually requires three alphabets:
                <ul>
                  <li>Byte values &isin; 0..255</li>
                  <li>[length, distance] pairs (with length &isin; 3..258 and distance &isin; 1..32768)</li>
                </ul>
              </li>
              <li class="fragment" data-fragment-index="1">Deflate combines literals &amp; length into one 287-character alphabet..</li>
              <li class="fragment" data-fragment-index="1" style="list-style-type: none;">
                <pre class="big noshadow" data-trim="true" style="padding-left: 0;">
                  <code class="cpp" data-trim="true" data-noescape="true">
   Code   Extra                   Code    Extra
  0..255:   0    literal byte    269..272:   2    length 19..34
     256:   0    end of block      ....
257..264:   0    length  3..10   281..284:   5    length 131..257
265..268:   1    length 11..18        285:   0    length 258
                  </code>
                </pre>
              </li>
              <li class="fragment" data-fragment-index="2">..and uses another 32 character alphabet for distances:
                <ul>
                  <li>5 bits (0..32) plus 0..13 extra bits for distances &isin; 1..32768</li>
                </ul>
              </li>
              <li class="fragment" data-fragment-index="3">Huffman code for 287-char alphabet is static (predefined) or dynamic</li>
            </ul>
          </section>

        </section>

        <section>

          <section data-background="images/background_default.jpg">
            <h2>Deflate Performance - 2020 vs. 2022</h2>

            <object data="images/i7-8650U-1900MHz-deflate-silesia-2020-09-16-file-deflate-silesia-horizontal-part2.svg"
                    type="image/svg+xml" style="width: 90%;">&nbsp;</object>

            <object data="images/i7-8650U-1900MHz-deflate-silesia-2022-10-21-file-deflate-silesia-horizontal-part2.svg"
                    type="image/svg+xml" style="width: 90%;">&nbsp;</object>
          </section>

          <section data-background="images/background_default.jpg">
            <h2>Deflate Performance - Compression vs. Throughput (mozilla)</h2>

            <object data="images/i7-8650U-1900MHz-deflate-silesia-2022-10-21-ratio-silesia-mozilla.svg"
                    type="image/svg+xml" style="height: 90%;">&nbsp;</object>
          </section>

          <section data-background="images/background_default.jpg">
            <h2>Deflate Performance - Compression vs. Throughput (xml)</h2>

            <object data="images/i7-8650U-1900MHz-deflate-silesia-2022-10-21-ratio-silesia-xml.svg"
                    type="image/svg+xml" style="height: 90%;">&nbsp;</object>
          </section>

        </section>

        <section>

          <section data-background="images/background_default.jpg">
            <h2>Inflate Performance - 2020 vs. 2022</h2>

            <object data="images/i7-8650U-1900MHz-inflate-silesia-2020-09-16-file-inflate-silesia-horizontal-part2.svg"
                    type="image/svg+xml" style="width: 90%;">&nbsp;</object>

            <object data="images/i7-8650U-1900MHz-inflate-silesia-2022-10-21-file-inflate-silesia-horizontal-part2.svg"
                    type="image/svg+xml" style="width: 90%;">&nbsp;</object>
          </section>

          <section data-background="images/background_default.jpg">
            <h2>Additional Benchmarks (x86_64 &amp; aarch64)</h2>

            <h2>
              <a href="https://github.com/simonis/zlib-bench">https://github.com/simonis/zlib-bench</a>
            </h2>

          </section>

        </section>

        <section data-background="images/background_default.jpg">
          <h2>Dynamic vs. Static Linking</h2>

          <ul>
            <li>Eternal question: <code style="color: #78b9e6;">-with-zlib=bundled</code> or
              <code style="color: #78b9e6;">-with-zlib=system</code>?
            </li>
            <li>Best answer: <span class="fragment" data-fragment-index="1">it depends &#x1F600;</span>
              <ul>
                <li class="fragment" data-fragment-index="2">JDK 8 and previous defaults to static, JDK 9+
                  <a href="https://bugs.openjdk.java.net/browse/JDK-8031767">changed to dynamic</a>
                </li>
                <li class="fragment" data-fragment-index="2" style="list-style-type: none;">
                  <pre class="big noshadow" data-trim="true" style="padding-left: 0;">
                    <code class="terminal" data-trim="true" data-noescape="true">
$ ldd jdk-8/jre/lib/amd64/libzip.so | grep libz
$ ldd jdk-11/lib/libzip.so | grep libz
libz.so.1 => /lib/x86_64-linux-gnu/libz.so.1 (0x00007ffff7785000)
                    </code>
                  </pre>
                </li>
                <li class="fragment">On Windows <em>always</em> static because there's no default system zlib</li>
                <li class="fragment">Recent system zlib on MacOSX/M1 is buggy ->
                  back to static (<a href="https://bugs.openjdk.org/browse/JDK-8286623">JDK-8286623</a>)
                </li>
                <li class="fragment">Security considerations (e.g. <a href="https://nvd.nist.gov/vuln/detail/CVE-2018-25032">CVE-2018-25032</a>)<br/>
                  zlib release 1.2.12 broke OpenJDK compatibility (see <a href="https://github.com/madler/zlib/issues/634">zlib issue 634</a>).
                </li>
              </ul>
            <li class="fragment">In the end every OpenJDK vendor can decide independently</li>
            </li>
          </ul>

        </section>

        <section>

          <section data-background="images/background_default.jpg">

            <h2>Using alternative zlib implementations with OpenJDK</h2>

            <ul>
              <li>Check if your OpenJDK version dynamically links zlib?</li>
              <li>If yes, use <code style="color: #78b9e6;">LD_LIBRARY_PATH</code>/<code style="color: #78b9e6;">LD_PRELOAD</code>
                (on MacOS <code style="color: #78b9e6;">DYLD_LIBRARY_PATH</code>)
              </li>
              <li style="list-style-type: none;">
                <pre class="big noshadow" data-trim="true" style="padding-left: 0;">
                  <code class="terminal" data-trim="true" data-noescape="true">
$ LD_LIBRARY_PATH=&lt;path-to-alternative-zlib&gt;/ java ...
$ LD_PRELOAD=&lt;path-to-alternative-zlib&gt;/libz.so java ...
                  </code>
                </pre>
              </li>
              <li class="fragment" data-fragment-index="1">Checking which library a running process is using:</li>
              <li class="fragment"  data-fragment-index="1" style="list-style-type: none;">
                <pre class="big noshadow" data-trim="true" style="padding-left: 0;">
                  <code class="terminal" data-trim="true" data-noescape="true">
$ java ... &amp;
$ cat /proc/`pidof java`/maps | grep "libz.so" | awk '{print $6;}' | uniq
<span class="fragment" data-fragment-index="2">/lib/x86_64-linux-gnu/libz.so.1.2.11</span>
<span class="fragment" data-fragment-index="3">$ <mark class="border">LD_LIBRARY_PATH=/tmp/zlib-cloudflare</mark> java ... &amp;
$ cat /proc/`pidof java`/maps | grep "libz.so" | awk '{print $6;}' | uniq</span>
<span class="fragment" data-fragment-index="4">/tmp/zlib-cloudflare/libz.so.1.2.8</span>
<span class="fragment" data-fragment-index="5">$ <mark class="border">LD_PRELOAD=/tmp/zlib-cloudflare/libz.so java</mark> ... &amp;
$ cat /proc/`pidof java`/maps | grep "libz.so" | awk '{print $6;}' | uniq</span>
<span class="fragment" data-fragment-index="6">/tmp/zlib-cloudflare/libz.so.1.2.8</span>
                  </code>
                </pre>
              </li>
            </ul>

          </section>

          <section data-background="images/background_default.jpg">

            <h2><code>InflaterInputStream::read(..)</code></h2>

            <ul>
              <li class="fragment" data-fragment-index="1"><code>InflaterInputStream</code> is derived from <code>InputStream</code></li>
              <li class="fragment" data-fragment-index="1"><code>InputStream::read(byte[] b, int off, int len)</code> API specification:<br/>
                <blockquote style="display: inline-block; background: #93a1a1; color: #000;">
                  .. If <code>k</code> bytes have been read, then these bytes will be stored in elements<br/>
                  <code>b[off]</code> through <code>b[off+k-1]</code>, leaving elements
                  <code>b[off+k]</code> through<br/> <code>b[off+len-1]</code> <span class="bold">unaffected</span>.
                </blockquote>
              </li>
              <li class="fragment" data-fragment-index="3"><span class="bold">But</span>,
                <code>InflaterInputStream::read(byte[] b, int off, int len)</code><br/>
                calls <code>Inflater::read(b, off, len)</code> which doesn't have this restriction!
              </li>
              <li class="fragment" data-fragment-index="3"><code>Inflater::read(..)</code> can scribble <code>b[off+k]</code>
                through <code>b[off+len-1]</code>!</li>
              <li class="fragment" data-fragment-index="4" style="margin-top: 2ex;">
                The original zlib never did, but optimized version <span class="bold">do so</span>!</li>
            </ul>

          </section>

          <section data-background="images/background_default.jpg">

            <h2><code>Inflate Optimizations</code></h2>

            <ul style="list-style-type: none;">
              <li>The original zlib copies byte-wise:<br/>
                <div width="100%" style="position: relative; margin: 0 0 0 0px;">
                  <div class="" style="position: static;">
                    <pre class="big noshadow" data-trim="true">
                      <code class="terminal" data-trim="true" data-noescape="true">
  original: 123456789abcdefg123456789

  deflated: ...[16,9]
               ^
out buffer: <mark class="border">123456789</mark>abcdefg.....................
                            ^
                      </code>
                    </pre>
                  </div>
                  <div class="fragment" data-fragment-index="1" style="position: absolute; left: 0; top: 0; width: 100%">
                    <pre class="big noshadow" data-trim="true">
                      <code class="terminal" data-trim="true" data-noescape="true">
  original: 123456789abcdefg123456789

  deflated: ...[16,9]
               ^
out buffer: 123456789abcdefg1...................
             ^               ^
                      </code>
                    </pre>
                  </div>
                  <div class="fragment" data-fragment-index="2" style="position: absolute; left: 0; top: 0; width: 100%">
                    <pre class="big noshadow" data-trim="true">
                      <code class="terminal" data-trim="true" data-noescape="true">
  original: 123456789abcdefg123456789

  deflated: ...[16,9]
               ^
out buffer: 123456789abcdefg12...................
              ^               ^
                      </code>
                    </pre>
                  </div>
                  <div class="fragment" data-fragment-index="3" style="position: absolute; left: 0; top: 0; width: 100%">
                    <pre class="big noshadow" data-trim="true">
                      <code class="terminal" data-trim="true" data-noescape="true">
  original: 123456789abcdefg123456789

  deflated: ...[16,9]
               ^
out buffer: 123456789abcdefg123..................
               ^               ^
                      </code>
                    </pre>
                  </div>
                  <div class="fragment" data-fragment-index="4" style="position: absolute; left: 0; top: 0; width: 100%">
                    <pre class="big noshadow" data-trim="true">
                      <code class="terminal" data-trim="true" data-noescape="true">
  original: 123456789abcdefg123456789

  deflated: ...[16,9]
               ^
out buffer: 123456789abcdefg1234.................
                ^               ^
                      </code>
                    </pre>
                  </div>
                  <div class="fragment" data-fragment-index="5" style="position: absolute; left: 0; top: 0; width: 100%">
                    <pre class="big noshadow" data-trim="true">
                      <code class="terminal" data-trim="true" data-noescape="true">
  original: 123456789abcdefg123456789

  deflated: ...[16,9]
               ^
out buffer: 123456789abcdefg12345................
                 ^               ^
                      </code>
                    </pre>
                  </div>
                  <div class="fragment" data-fragment-index="6" style="position: absolute; left: 0; top: 0; width: 100%">
                    <pre class="big noshadow" data-trim="true">
                      <code class="terminal" data-trim="true" data-noescape="true">
  original: 123456789abcdefg123456789

  deflated: ...[16,9]
               ^
out buffer: 123456789abcdefg123456...............
                  ^               ^
                      </code>
                    </pre>
                  </div>
                  <div class="fragment" data-fragment-index="7" style="position: absolute; left: 0; top: 0; width: 100%">
                    <pre class="big noshadow" data-trim="true">
                      <code class="terminal" data-trim="true" data-noescape="true">
  original: 123456789abcdefg123456789

  deflated: ...[16,9]
               ^
out buffer: 123456789abcdefg1234567..............
                   ^               ^
                      </code>
                    </pre>
                  </div>
                  <div class="fragment" data-fragment-index="8" style="position: absolute; left: 0; top: 0; width: 100%">
                    <pre class="big noshadow" data-trim="true">
                      <code class="terminal" data-trim="true" data-noescape="true">
  original: 123456789abcdefg123456789

  deflated: ...[16,9]
               ^
out buffer: 123456789abcdefg12345678.............
                    ^               ^
                      </code>
                    </pre>
                  </div>
                  <div class="fragment" data-fragment-index="9" style="position: absolute; left: 0; top: 0; width: 100%">
                    <pre class="big noshadow" data-trim="true">
                      <code class="terminal" data-trim="true" data-noescape="true">
  original: 123456789abcdefg123456789

  deflated: ...[16,9]
                     ^
out buffer: 123456789abcdefg123456789............
                                     ^
                      </code>
                    </pre>
                  </div>
                </div>
              </li>
              <li class="fragment" data-fragment-index="10">zlib-chromium uses vector (16 byte) load/store instructions if possible:<br/>
                <div width="100%" style="position: relative; margin: 0 0 0 0px;">
                  <div class="" style="position: static;">
                    <pre class="big noshadow" data-trim="true">
                      <code class="terminal" data-trim="true" data-noescape="true">
  original: 123456789abcdefg123456789

  deflated: ...[16,9]
               ^
out buffer: <mark class="border">123456789</mark>abcdefg.....................
                            ^
                      </code>
                    </pre>
                  </div>
                  <div class="fragment" data-fragment-index="11" style="position: absolute; left: 0; top: 0; width: 100%">
                    <pre class="big noshadow" data-trim="true">
                      <code class="terminal" data-trim="true" data-noescape="true">
  original: 123456789abcdefg123456789

  deflated: ...[16,9]
                     ^
out buffer: 123456789abcdefg123456789<span class="fragment highlight-current-border red" data-fragment-index="11">abcdefg</span>.....
                                     ^
                      </code>
                    </pre>
                  </div>
                  <div class="fragment" data-fragment-index="12" style="position: absolute; left: 0; top: 0; width: 100%">
                    <pre class="big noshadow" data-trim="true">
                      <code class="terminal" data-trim="true" data-noescape="true">
  original: 123456789abcdefg123456789

  deflated: ...[16,9]
                     ^
out buffer: 123456789abcdefg123456789abcdefg<span class="fragment highlight-current-border red" data-fragment-index="12">XXX</span>..
                                     ^
                      </code>
                    </pre>
                  </div>
                </div>
              </li>
              <li class="fragment" data-fragment-index="12">zlib-chromium even
                <a href="https://chromium.googlesource.com/chromium/src/third_party/zlib/+/015fb32fd2082e802e4e911129628e201ae7def1%5E%21/#F3">
                  write some extra padding</a> to warn users!!!
              </li>
            </ul>

          </section>

          <section data-background="images/background_default.jpg">

            <h2>Inflate Optimization Issues</h2>

            <ul>
              <li>How can this ever affect real user code?
                <ul>
                  <li>The <code>::read(..)</code> buffer can always be overwritten completely.<br/>
                    <span class="fragment" data-fragment-index="1">So nobody will <em>seriously</em> store important data there, right?</span>
                  </li>
                </ul>
              </li>
              <li class="fragment" data-fragment-index="2">Enters the scene: clever code from <a href="https://gitlab.ow2.org/asm/asm/-/blob/cfda364ce57e39412b6cc89699b1003c6da6ec41/asm/src/main/java/org/objectweb/asm/ClassReader.java#L308">ASM</a>:<br/>
                <pre class="big noshadow" data-trim="true">
                  <code class="java" data-trim="true" data-noescape="true">
int readcount = 0;
while ((bytesRead = <span class="fragment highlight-current-border" data-fragment-index="3">inflaterInputStream.read(<span class="fragment highlight-current-border red" data-fragment-index="4">data</span>, 0, bufferSize)</span>) != -1) {
    outputStream.write(data, 0, bytesRead);
    readCount++;
}
if (<span class="fragment highlight-current-border" data-fragment-index="3">readCount == 1</span>) {
    return <span class="fragment highlight-current-border red" data-fragment-index="4">data</span>;         //  &lt;---- first bytes might be overwritten
}
return outputStream.toByteArray();
                  </code>
                </pre>
              </li>
              <li class="fragment" data-fragment-index="3">Even for "readCount == 1", "inflaterInputStream.read(..)" gets called twice!<br/>
                <span  class="fragment" data-fragment-index="4">The second call overwrites the first bytes in "data[]" because of padding bytes.</span>
              </li>
            </ul>

          </section>


          <section data-background="images/background_default.jpg">

            <h2>Inflate Optimization Issues &amp; Fixes</h2>

            <ul>
              <li>Real issues in ASM (<a href="https://gitlab.ow2.org/asm/asm/-/issues/317955">317955</a>)
                and Spring (<a href="https://github.com/spring-projects/spring-framework/issues/27429">27429</a>)
                <ul class="fragment">
                  <li>Fixed in OpenJDK 19/20 with<br/> <a href="https://bugs.openjdk.java.net/browse/JDK-8281962">
                      8281962: Avoid unnecessary native calls in InflaterInputStream</a></li>
                  <li>Fixed in zlib-chromium (<a href="https://bugs.chromium.org/p/chromium/issues/detail?id=1302606">1302606</a>)
                    <em>and</em><br/> zlib-cloudflare (<a href="https://github.com/cloudflare/zlib/pull/31">PR 31</a>)
                    which imported this issue from chromium.
                  </li>
                </ul>
              </li>
              <li class="fragment" style="margin-top: 2ex;">Changed the Specification of InflaterInputStream in JDK 20<br/>
                to allow faster Zip implementations.
                <ul>
                  <li><a href="https://bugs.openjdk.org/browse/JDK-8283758">JDK-8283758: Weaken the InflaterInputStream specification...</a></li>
                </ul>
              </li>
              <li class="fragment" style="margin-top: 2ex;">For more details see: <a href="https://github.com/simonis/zlib-chromium">
                https://github.com/simonis/zlib-chromium</a></li>
            </ul>

          </section>

        </section>

        <section>

          <section data-background="images/background_default.jpg">

            <h2>The zip File Format</h2>

            <div style="display: inline-block;">
              <pre class="big noshadow" data-trim="true">
                <code style="background: #93a1a1; color: #000;" class="text" data-trim="true" data-noescape="true">
                                           <span class="fragment highlight-current-border border-no-bottom" data-fragment-index="0"> Central </span>
 <span class="fragment highlight-current-border" data-fragment-index="0">FileEntry1</span>  <span class="fragment highlight-current-border" data-fragment-index="0">FileEntry2</span>       <span class="fragment highlight-current-border" data-fragment-index="0">FileEntryN</span>   <span class="fragment highlight-current-border border-no-top" data-fragment-index="0">Directory</span>
/          \/          \     /          \/           \
<mark>|<span class="fragment highlight-current-border" data-fragment-index="1">LH</span>|<span class="fragment highlight-current-border" data-fragment-index="4">data</span>|<span class="fragment highlight-current-border" data-fragment-index="3">DD</span>||<span class="fragment highlight-current-border" data-fragment-index="1">LH</span>|<span class="fragment highlight-current-border" data-fragment-index="4">data</span>|<span class="fragment highlight-current-border" data-fragment-index="3">DD</span>|.....|<span class="fragment highlight-current-border" data-fragment-index="1">LH</span>|<span class="fragment highlight-current-border" data-fragment-index="4">data</span>|<span class="fragment highlight-current-border" data-fragment-index="3">DD</span>||<span class="fragment highlight-current-border" data-fragment-index="2">CH</span>|<span class="fragment highlight-current-border" data-fragment-index="2">CH</span>|..|<span class="fragment highlight-current-border" data-fragment-index="2">CH</span>|<span class="fragment highlight-current-border" data-fragment-index="5">EOCD</span>|</mark>
^           ^                ^            |  |        |
|           |                |            |  |        |
|           |                +------------|--|--------+
|           |                             |  |
|           +-----------------------------|--+
|                                         |
+-----------------------------------------+

<span class="fragment highlight-current-border" data-fragment-index="1">LH (Local File Header)        : name, size (comp &amp; uncomp), CRC32,.. </span>
<span class="fragment highlight-current-border" data-fragment-index="2">CH (Central File Header)      : offset, name, size (comp &amp; uncomp),..</span>
<span class="fragment highlight-current-border" data-fragment-index="3">DD (Data Descriptor, optional): size (comp &amp; uncomp), CRC32</span>
<span class="fragment highlight-current-border" data-fragment-index="4">data                          : (compressed) data stream</span>
<span class="fragment highlight-current-border" data-fragment-index="5">EOCD (End Of Centr. Directory): signature,..</span>
                </code>
              </pre>
<div style="display: none;">
<![CDATA[
                                            Central
 FileEntry1  FileEntry2       FileEntryN   Directory
/          \/          \     /          \/           \
|LH|data|DD||LH|data|DD|.....|LH|data|DD||CH|CH|..|CH|EOCD|
^           ^                ^            |  |        |
|           |                |            |  |        |
|           |                +------------|--|--------+
|           |                             |  |
|           +-----------------------------|--+
|                                         |
+-----------------------------------------+

LH (Local File Header)          : name, size (comp & uncomp), CRC32,..
CH (Central File Header)        : name, size (comp & uncomp), CRC32,..
DD (Data Dascriptor, optional)  : size (comp & uncomp), CRC32
data                            : (compressed) data stream
EOCD (End Of Centr. Dir. record): signature,..
]]>
</div>
            </div>

          </section>

          <section data-background="images/background_default.jpg">

            <h2>Copying zip Files in Java</h2>

            <ul>
              <li class="fragment"><code style="color: #78b9e6;">ZipEntry</code> corresponds to Local/Central File Header
                <ul>
                  <li><code style="color: #78b9e6;">ZipEntry</code> returned by <code style="color: #78b9e6;">ZipInputStream</code> correspond to LFH</li>
                  <li><code style="color: #78b9e6;">ZipEntry</code> returned by <code style="color: #78b9e6;">ZipFile</code> correspond to CFH</li>
                </ul>
              </li>
              <li class="fragment">There's no way to read/write the compressed data stream from a <code style="color: #78b9e6;">ZipEntry</code></li>
              <li class="fragment">To copy a <code style="color: #78b9e6;">ZipEntry</code> we have to inflate and deflate it again<br/>
                <pre class="big noshadow" data-trim="true">
                  <code class="java" data-trim="true" data-noescape="true">
 zis = new ZipInputStream(new FileInputStream("src.zip"));
 zos = new ZipOutputStream(new FileOutputStream("dst.zip"));
 while((entry = zis.getNextEntry()) != null) {
     zos.putNextEntry(entry);
     zis.transferTo(zos); // uses j.u.z.{Inflater/Deflater}
 }
                  </code>
                </pre>
              </li>
              <li class="fragment">If <span style="color: #e6db74;">"src.zip"</span> was compressed with a different zlib (or compression level):<br/>
                we get a: <code style="color: #78b9e6;">ZipException: "invalid entry compressed size (..)"</code>
              </li>
            </ul>
          </section>

          <section data-background="images/background_default.jpg">

            <h2>Fixing the "<em>invalid entry compressed size</em>" issue</h2>

            <ul>
              <li><a href ="https://bugs.openjdk.org/browse/JDK-8253952">JDK-8253952: Refine ZipOutputStream.putNextEntry()
                  to recalculate ZipEntry's compressed size</a></li>
              <li>Fixed in JDK 16</li>
              <li class="fragment">Ignore <code style="color: #78b9e6;">ZipEntry</code>'s compressed size attribute except when explicitly set:
                <ul>
                  <li>Required changes to <code style="color: #78b9e6;">ZipOutputStream.putNextEntry()</code>'s API spec:<br/>
                    <pre class="big noshadow" data-trim="true">
                      <code class="patch" data-trim="true" data-noescape="true">
 ...
+     * ............................ When writing a compressed (DEFLATED)
+     * entry, and the compressed size has not been explicitly set with the
+     * {@link ZipEntry#setCompressedSize(long)} method, then the compressed
+     * size will be set to the actual compressed size after deflation.
 ...
 public void putNextEntry(ZipEntry ze) throws IOException {
                      </code>
                    </pre>
                  </li>
                </ul>
              </li>
              <li class="fragment">This will write an empty LFH and put the compressed size into the Data Descriptor</li>
            </ul>
          </section>

        </section>

        <section data-background="images/background_default.jpg">
          <h1>References</h1>

          <ul>
            <li><a href="https://www.rfc-editor.org/rfc/rfc1950">RFC 1950: ZLIB Compressed Data Format Specification version 3.3</a></li>
            <li><a href="https://www.rfc-editor.org/rfc/rfc1951">RFC 1951: DEFLATE Compressed Data Format Spec. vers. 1.3</a></li>
            <li><a href="https://www.rfc-editor.org/rfc/rfc1952">RFC 1952: GZIP file format spec. vers. 4.3</a></li>
            <li><a href="https://zlib.net/feldspar.html">An explanation of the Deflate algorithm</a></li>
            <li><a href="https://www.hanshq.net/zip.html">Zip Files: History, Explanation and Implementation</a></li>
            <li><a href="https://www.sobyte.net/post/2022-01/gzip-and-deflate/">Gzip format and DEFLATE compression algorithm</a></li>
            <li><a href="https://www.euccas.me/zlib/">Understanding zlib</a></li>
            <li><a href="https://ieeexplore.ieee.org/document/6824430">A fast implementation of Deflate</a></li>
            <li><a href="https://www.intel.com/content/dam/www/public/us/en/documents/white-papers/zlib-compression-whitepaper-copy.pdf">
                High Performance ZLIB compression on Intel Architecture Processors</a></li>
            <li><a href="https://pkware.cachefly.net/webdocs/casestudies/APPNOTE.TXT">
                ZIP File Format Specification</a></li>
            <li><a href="https://github.com/madler/infgen">infgen: a deflate stream disassembler</a> (by M. Adler)
            </li>
          </ul>
        </section>

        <section data-background="images/background_last.jpg">
          <h2 style="text-transform: none;">
            <a href="https://simonis.github.io/EclipseCon2022/" style="color: inherit;">https://simonis.github.io/EclipseCon2022/</a>
          </h2>
        </section>

      </div>

    </div>

    <script src="reveal.js/lib/js/head.min.js"></script>
    <script src="reveal.js/js/reveal.js"></script>

    <script>

      // Full list of configuration options available at:
      // https://github.com/hakimel/reveal.js#configuration
      Reveal.initialize({
        //width: 1024,
        //height: 768,
        //width: 1280,
        //height: 720,
        //width: 1366,
        //height: 768,
        width: 1920,
        height: 1080,
        margin: 0.1,
        controls: true,
        progress: true,
        history: true,
        center: true,
        slideNumber: true,

        transition: 'none', // none/fade/slide/convex/concave/zoom

        // Optional reveal.js plugins
        dependencies: [
          { src: 'reveal.js/lib/js/classList.js', condition: function() { return !document.body.classList; } },
          { src: 'reveal.js/plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
          { src: 'reveal.js/plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
          { src: 'reveal.js/plugin/highlight/highlight.js', async: true, condition: function() { return !!document.querySelector( 'pre code' ); }, callback: function() {

hljs.registerLanguage('terminal', function(hljs) {
  return {
    contains: [
      hljs.C_LINE_COMMENT_MODE,
      {
        className: 'title',
        lexemes: /[$()>_a-zA-Z0-9]+/,
        keywords: "$ (gdb) hsdb>",
        begin: /^\$ |\(gdb\)|hsdb> /,
        end: /[^\\]\n/,
	contains: [
          hljs.COMMENT('//', '$', { endsParent: true })
	]
      }
    ]
  }
});

hljs.initHighlightingOnLoad(); } },
          { src: 'reveal.js/plugin/zoom-js/zoom.js', async: true },
          { src: 'reveal.js/plugin/notes/notes.js', async: true }
        ]
      });

      //Reveal.configure({ slideNumber: true });



<![CDATA[

      // This function was adapted from:
      // Titus Cieslewski (https://stackoverflow.com/users/796329/titus-cieslewski) and
      // Dan Harper (https://stackoverflow.com/users/148975/danharper) from:
      // https://stackoverflow.com/questions/808826/draw-arrow-on-canvas-tag
      function canvas_arrow(context, fromx, fromy, tox, toy){
        var headlen = 10;   // length of head in pixels
        var angle = Math.atan2(toy-fromy,tox-fromx);
        context.lineCap = 'round';
        context.moveTo(fromx, fromy);
        context.lineTo(tox, toy);
        context.moveTo(tox, toy);
        context.lineTo(tox-headlen*Math.cos(angle-Math.PI/6),toy-headlen*Math.sin(angle-Math.PI/6));
        context.moveTo(tox, toy);
        context.lineTo(tox-headlen*Math.cos(angle+Math.PI/6),toy-headlen*Math.sin(angle+Math.PI/6));
      }

      function drawArrow(canvas, from, target, color) {
        var ctx = canvas.getContext("2d");
        ctx.lineWidth = 3;
        ctx.strokeStyle= color;
        var x1, y1, x2, y2;
        if ((from.offsetTop + from.offsetHeight) < (target.offsetTop)) {
          // 'from' above 'target'
          if ((from.offsetLeft + from.offsetWidth) < (target.offsetLeft)) {
            // 'from' feft of 'target'
            x1 = from.offsetLeft + from.offsetWidth;
            y1 = from.offsetTop + from.offsetHeight;
            x2 = target.offsetLeft;
            y2 = target.offsetTop;
          }
          else if ((from.offsetLeft) > (target.offsetLeft + target.offsetWidth)) {
            // 'from' right of 'target'
            x1 = from.offsetLeft;
            y1 = from.offsetTop + from.offsetHeight;
            x2 = target.offsetLeft + target.offsetWidth;
            y2 = target.offsetTop;
          }
          else {
            x1 = from.offsetLeft + (from.offsetWidth / 2);
            y1 = from.offsetTop + from.offsetHeight;
            x2 = target.offsetLeft + (target.offsetWidth / 2);
            y2 = target.offsetTop;
          }
        }
        else if ((from.offsetTop) > (target.offsetTop + target.offsetHeight)) {
          // 'from' below 'target'
          if ((from.offsetLeft + from.offsetWidth) < (target.offsetLeft)) {
            // 'from' feft of 'target'
            x1 = from.offsetLeft + from.offsetWidth;
            y1 = from.offsetTop;
            x2 = target.offsetLeft;
            y2 = target.offsetTop + target.offsetHeight;
          }
          else if ((from.offsetLeft) > (target.offsetLeft + target.offsetWidth)) {
            // 'from' right of 'target'
            x1 = from.offsetLeft;
            y1 = from.offsetTop;
            x2 = target.offsetLeft + target.offsetWidth;
            y2 = target.offsetTop + target.offsetHeight;
          }
          else {
            x1 = from.offsetLeft + (from.offsetWidth / 2);
            y1 = from.offsetTop;
            x2 = target.offsetLeft + (target.offsetWidth / 2);
            y2 = target.offsetTop + target.offsetHeight;
          }
        }
        else if ((from.offsetLeft) < (target.offsetLeft)) {
          // 'from' feft of 'target'
          x1 = from.offsetLeft + from.offsetWidth;
          y1 = from.offsetTop + (from.offsetHeight / 2);
          x2 = target.offsetLeft;
          y2 = target.offsetTop + (target.offsetHeight / 2);
        }
        else {
          // 'from' right of 'target'
          x1 = from.offsetLeft;
          y1 = from.offsetTop + (from.offsetHeight / 2);
          x2 = target.offsetLeft + target.offsetWidth;
          y2 = target.offsetTop + (target.offsetHeight / 2);
        }
        ctx.beginPath();
        ctx.moveTo(x1, y1);
        //ctx.bezierCurveTo(30,60,40,100, 50,120);
        ctx.lineTo(x2, y2);
        canvas_arrow(ctx, x1, y1, x2, y2);
        ctx.stroke();
      }

      function handleFragmentEvent(fragments, current, show) {
        var code = current.parentNode;
        var firstArrow = true;
        var fragmentShown = false;

        var canvas, canvases = code.getElementsByTagName("canvas");
        if (canvases.length != 0) {
          canvas = canvases[0];
          canvas.getContext("2d").clearRect(0, 0, canvas.width, canvas.height);
        }
        fragments.forEach(function(fragment, i) {
          if (show === false && current === fragment) fragmentShown = true;
          var cll = fragment.classList;
          if (((cll.contains("highlight-border") && !fragmentShown) ||
               (cll.contains("highlight-current-border") && cll.contains("current-fragment"))) &&
              fragment.hasAttribute("arrow-to")) {

            var target = document.getElementById(fragment.getAttribute("arrow-to"));
            if (canvases.length === 0) {
              canvas = document.createElement("canvas");
              // Place the canvas right over the parent node ..
              canvas.style.position= 'absolute';
              canvas.style.zIndex= '100';
              canvas.style.top= '0px';
              canvas.style.left= '0px';
              // .. and make it the same size.
              canvas.style.width= code.offsetWidth + 'px';
              canvas.style.height= code.offsetHeight + 'px';
              // Make the canvas bounding box (i.e. canvas' css dimensions)
              // and the canvas logical size be the same. That way we don't
              // have to convert between the two coordinate systems of the
              // elemnts on the overlaying DOM element and the canvas.
              canvas.width= code.offsetWidth;
              canvas.height= code.offsetHeight;
              code.appendChild(canvas);
            }
            drawArrow(canvas, fragment, target, "#1b91ff");
          }
          if (show === true && current === fragment) fragmentShown = true;
        });
      }

      Reveal.addEventListener('fragmenthidden', function(event) {
        handleFragmentEvent(event.allFragments, event.fragments[0], false);
      });

      Reveal.addEventListener('fragmentshown', function(event) {
        handleFragmentEvent(event.allFragments, event.fragments[event.fragments.length - 1], true);
      });


]]>
    </script>

  </body>
</html>

<!--  LocalWords:  zlib OpenJDK scrollable px pre hljs noshadow fff
 -->
<!--  LocalWords:  elemnts hirarchy monospace arial helvetica ffffff
 -->
<!--  LocalWords:  td functionCall darkblue javaCall darkgreen ffa cb
 -->
<!--  LocalWords:  rowspan fefefe rgba webkit animatetop keyframes li
 -->
<!--  LocalWords:  eee attr Roboto eval defun setq inputStr substring
 -->
<!--  LocalWords:  resultStr concat kbd ia vhs JNI JDK Changelog CRC
 -->
<!--  LocalWords:  intrinsification Redestad lookups LZ abaca ecb LZZ
 -->
<!--  LocalWords:  aecb daecb mozilla xml aarch MacOSX CVE MacOS ASM
 -->
<!--  LocalWords:  readCount InflaterInputStream cloudflare LFH CFH
 -->
<!--  LocalWords:  src ZipOutputStream putNextEntry ZipEntry's vers
 -->
<!--  LocalWords:  GZIP Gzip infgen
 -->
