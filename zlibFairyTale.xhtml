<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">

  <head>
    <meta charset="utf-8" />

    <title>A fairy tale of zlib/zip compression in OpenJDK</title>

    <meta name="description" content="A fairy tale of zlib/zip compression in OpenJDK" />
    <meta name="author" content="Volker H. Simonis" />

    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />

    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, minimal-ui" />

    <link rel="stylesheet" href="reveal.js/css/reveal.css" />
    <link rel="stylesheet" href="reveal.js/css/theme/joker2017.css" id="theme" />

    <!-- Code syntax highlighting -->
    <link rel="stylesheet" href="reveal.js/lib/css/monokai_sublime.css" />

  <style type="text/css">
.scrollable {
    bottom: 0px;
    overflow-y: auto  !important;
    overflow-x: hidden !important;
}

.reveal .slides > section.demo,
.reveal .slides > section > section.demo {
    padding: 0;
}

.reveal .big {
    font-size: .8em;
    line-height: 1.3em;
}

.reveal pre.console {
    background-color: black;
    color: #00ff00;
}

code.terminal .hljs-title {
    color: #00ff00;
}

/* Used for styling command lines in a 'java' code block */
code.java .hljs-title-terminal {
    color: #00ff00;
}

.reveal pre.noshadow {
    border-radius: 0;
    box-shadow: unset;
}

.reveal pre code {
    max-height: 100%;
}
.bold {
    font-weight: bold;
}

.reveal .outline_white {
    color: white;
    text-shadow:
        -2px -2px 0 #000,
         2px -2px 0 #000,
        -2px  2px 0 #000,
         2px  2px 0 #000;
    min-height: 1.1em;
    text-align: center;
}
.reveal .outline_black {
    color: black;
    text-shadow:
        -2px -2px 0 #fff,
         2px -2px 0 #fff,
        -2px  2px 0 #fff,
         2px  2px 0 #fff;
    min-height: 1.1em;
    text-align: center;
}

.reveal .slide-number {
    position: fixed;
    display: block;
    left: 15px;
    bottom: 15px;
    opacity: 0.9;
    z-index: 31;
    font-size: 14px;
    text-align: center;
}
.reveal h1, .reveal h2, .reveal h3, .reveal h4, .reveal h5, .reveal h6 {
    text-transform: none;
}

.hljs-class .hljs-title {
    /* fix "public static class Y extends X {" such that 'Y' will be formatted the same like 'X' */
    color: #A6E22E;
    font-style: italic;
}

mark {
    color: black;
    background-color: yellow;
    border-radius: 10px;
}
mark.orange {
    color: black;
    background-color: orange;
    border-radius: 10px;
}
mark.border {
    color: inherit;
    background-color: inherit;
    border: 5px solid #1B91FF;
    /* Use a negative margin with the same size as the border to avoid size changes of elemnts with borders or when the border is set dynamically by fragments */
    margin: 0 -5px 0 -5px;
    border-radius: 10px;
}
mark.border-no-top {
    color: inherit;
    background-color: inherit;
    margin: 0 -5px 0 -5px;
    border-style: solid;
    border-color: #1B91FF;
    border-width: 0px 5px 5px 5px;
    border-radius: 0px 0px 10px 10px;
}
mark.border-no-bottom {
    color: inherit;
    background-color: inherit;
    margin: 0 -5px 0 -5px;
    border-style: solid;
    border-color: #1B91FF;
    border-width: 5px 5px 0px 5px;
    border-radius: 10px 10px 0px 0px;
}

.reveal .slides section .fragment.highlight-border, .reveal .slides section .fragment.highlight-current-border {
  opacity: 1;
  visibility: visible;
  /* Define a transparent border with the same size for inactive fragments such that we have no size changes when the fragments get displayed */
  border-width: 3px 3px 3px 3px;
  border-style: solid;
  border-color: transparent;
  /* Use a negative margin with the same size as the border to avoid size changes of elemnts with borders or when the border is set dynamically by fragments */
  margin: -3px;
}
.reveal .slides section .fragment.highlight-border.visible {
  border: 3px solid #1B91FF;
  border-radius: 10px;
  margin: 3px -3px 3px -3px;
}
.reveal .slides section .fragment.highlight-current-border.current-fragment {
  border: 3px solid #1B91FF;
  border-radius: 10px;
  margin: -3px;
}
.reveal .slides section .fragment.highlight-current-border.red.current-fragment {
  border: 3px solid #F00;
  border-radius: 10px;
  margin: -3px;
}
.reveal .slides section .fragment.highlight-current-border.border-no-top.current-fragment {
  border-style: solid;
  border-color: transparent #1B91FF #1B91FF #1B91FF;
  border-width: 3px;
  border-radius: 0px 0px 10px 10px;
  margin: -3px;
}
.reveal .slides section .fragment.highlight-current-border.border-no-bottom.current-fragment {
  border-style: solid;
  border-color: #1B91FF #1B91FF transparent #1B91FF;
  border-width: 3px;
  border-radius: 10px 10px 0px 0px;
  margin: -3px;
}
.reveal .slides section .fragment.highlight-current-border.border-no-bottom-top.current-fragment {
  border-style: solid;
  border-color: transparent #1B91FF transparent #1B91FF;
  border-width: 3px;
  border-radius: 0px 0px 0px 0px;
  margin: -3px;
}


  table.calling_hirarchy {
/*    font-family: monospace, arial, helvetica, sans-serif; */
/*    background-color: #ffffff; */
    font-size: smaller;
    border-collapse: collapse;
    margin: 0px auto;
    padding: 2px;
    width: auto;
    overflow: auto;
    border: none;
  }

  table.calling_hirarchy tr {
    border: none;
  }

  table.calling_hirarchy td {
    padding: 4px;
/*    font-family: monospace; */
  }

  td.indent_level_0 {
    border-style: solid;
    border-width: 2px;
    background-color: #a0a0a0;
  }
  td.indent_level_1 {
    border-style: solid;
    border-width: 2px;
    background-color: #a8a8a8;
  }
  td.indent_level_2 {
    border-style: solid;
    border-width: 2px;
    background-color: #b0b0b0;
  }
  td.indent_level_3 {
    border-style: solid;
    border-width: 2px;
    background-color: #b8b8b8;
  }
  td.indent_level_4 {
    border-style: solid;
    border-width: 2px;
    background-color: #c0c0c0;
  }
  td.indent_level_5 {
    border-style: solid;
    border-width: 2px;
    background-color: #c8c8c8;
  }
  td.indent_level_6 {
    border-style: solid;
    border-width: 2px;
    background-color: #d0d0d0;
  }
  td.indent_level_7 {
    border-style: solid;
    border-width: 2px;
    background-color: #d8d8d8;
  }
  td.indent_level_8 {
    border-style: solid;
    border-width: 2px;
    background-color: #e0e0e0;
  }
  td.indent_level_9 {
    border-style: solid;
    border-width: 2px;
    background-color: #e8e8e8;
  }
  td.indent_level_10 {
    border-style: solid;
    border-width: 2px;
    background-color: #f0f0f0;
  }
  td.indent_level_11 {
    border-style: solid;
    border-width: 2px;
    background-color: #f8f8f8;
  }
  td.indent_level_12 {
    border-style: solid;
    border-width: 2px;
    background-color: #ffffff;
  }
  td.functionCall {
/*    font-weight: bold; */
    color: darkblue;
  }
  td.javaCall {
    font-weight: bold;
    color: darkgreen;
  }
  td.comment {
    font-style: italic;
    color: maroon;
  }
  td.highlight {
    border-style: solid;
    border-width: 2px;
    background-color: #a0ffa0;
  }
  table.calling_hirarchy td[rowspan] {
    border-style: none;
    border-width: 0;
    border-left: dotted;
    border-left-width: 2px;
  }

/* The Quiz (background) */
.reveal .slides section .quiz {
    display: none; /* Hidden by default */
}

.reveal .slides section .fragment.quiz {
    display: none; /* Hidden by default */
}

.reveal .slides section .fragment.quiz.current-fragment {
    display: block;
    position: fixed; /* Stay in place */
    z-index: 1; /* Sit on top */
    padding-top: 100px; /* Location of the box */
    left: 0;
    top: 0;
    width: 100%; /* Full width */
    height: 100%; /* Full height */
    overflow: auto; /* Enable scroll if needed */
}

/* Quiz Content */
.reveal .slides section .quiz-content {
    display: inline-block;
    position: relative;
    background-color: #fefefe;
    margin: auto;
    padding: 0;
    border: 1px solid #888;
    width: auto;
    box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2),0 6px 20px 0 rgba(0,0,0,0.19);
    -webkit-animation-name: animatetop;
    -webkit-animation-duration: 0.4s;
    animation-name: animatetop;
    animation-duration: 0.4s
}

/* Add Animation */
@-webkit-keyframes animatetop {
    from {top:-300px; opacity:0}
    to {top:0; opacity:1}
}

@keyframes animatetop {
    from {top:-300px; opacity:0}
    to {top:0; opacity:1}
}

.reveal .slides section .quiz-header {
    padding: 12px 12px;
    background-color: #7571ff;
/*  background-color: #5cb85c; */
    color: white;
}

.reveal .slides section .quiz-header h2 {
    margin: 0;
}

.reveal .slides section .quiz-body {
    padding: 12px 16px;
    color: #3f3f3f;
}

.reveal .slides section .quiz-body li:not(:last-child) {
    margin-bottom: 15px;
}

.reveal .slides section .quiz-footer {
    padding: 12px 16px;
    background-color: #7571ff;
/*  background-color: #5cb85c; */
    color: white;
}

.reveal .left-footer {
    display: block;
    position: fixed;
    z-index: 30;
    left: 15px;
    bottom: 15px;
    font-size: 12px;
    color: #eee8d5;
}

ul.before::before {
    content:attr(data-header);
    font-size:120%;
    font-weight:bold;
    margin-left: -2ex;
}
</style>

    <!-- Printing and PDF exports -->
    <script>
      var link = document.createElement( 'link' );
      link.rel = 'stylesheet';
      link.type = 'text/css';
      link.href = window.location.search.match( /print-pdf/gi ) ? 'reveal.js/css/print/pdf.css' : 'reveal.js/css/print/paper.css';
      document.getElementsByTagName( 'head' )[0].appendChild( link );
    </script>

    <!--[if lt IE 9]>
    <script src="reveal.js/lib/js/html5shiv.js"></script>
    <![endif]-->

    <!--
      Issue #1105: Keyboard shortcut to skip forward/back over fragments #1173
      https://github.com/hakimel/reveal.js/pull/1173
    -->
  </head>

<!--
;; indent block of text
;; C-u <number> C-x <TAB>



;; select this code and do 'M-x eval-region'
(defun make-fragment (p1 p2)
  "Wraps the selection into 'fragment' <span>s and quotes '&', '<' and '>'."
  (interactive "r")
  (setq inputStr (buffer-substring-no-properties p1 p2))
  (setq inputStr (replace-regexp-in-string "&" "&amp;" inputStr))
  (setq inputStr (replace-regexp-in-string "<" "&lt;" inputStr))
  (setq inputStr (replace-regexp-in-string ">" "&gt;" inputStr))
  (setq resultStr (concat "<span class=\"fragment\">" (concat inputStr "</span>")))
  (delete-region p1 p2)
  (insert resultStr)
)
(defun make-fragment-simple (p1 p2)
  "Wraps the selection into 'fragment' <span>s without any quoting."
  (interactive "r")
  (setq inputStr (buffer-substring-no-properties p1 p2))
  (setq resultStr (concat "<span class=\"fragment\">" (concat inputStr "</span>")))
  (delete-region p1 p2)
  (insert resultStr)
)
(defun quote-fragment (p1 p2)
  "Quotes '&', '<' and '>'."
  (interactive "r")
  (setq inputStr (buffer-substring-no-properties p1 p2))
  (setq inputStr (replace-regexp-in-string "&" "&amp;" inputStr))
  (setq inputStr (replace-regexp-in-string "<" "&lt;" inputStr))
  (setq inputStr (replace-regexp-in-string ">" "&gt;" inputStr))
  (delete-region p1 p2)
  (insert inputStr)
)

(global-set-key (kbd "C-f") 'make-fragment)
(global-set-key (kbd "C-S-f") 'make-fragment-simple)
(global-set-key (kbd "C-S-q") 'quote-fragment)
;; revert key-binding
;; (global-set-key (kbd "C-f") 'forward-char)
;;
;; use 'C-h k <keystroke>' to find out what <keystroke> ia currently bound to

;; (vhs) The following is required to make 'C-c C-t' insert <code> tags without
;; newlines. 'sgml-tag-alist' is the "file-local" version of 'html-tag-alist'
(add-to-list 'html-tag-alist '("code"))
(add-to-list 'sgml-tag-alist '("code"))

-->

  <body>

    <div class="reveal">


    <div class="left-footer">
       <object data="images/AWS_transparent.png" alt="AWS logo" type="image/png" style="vertical-align: middle; width: 40px; margin: 0 10px 0 0;"/>
       <span>© 2022, Amazon Web Services, Inc. or its affiliates. All rights reserved.</span>
    </div>

      <!-- Any section element inside of this container is displayed as a slide -->
      <div class="slides">

        <section data-background="images/background_title.jpg" style="text-align: left;">
          <p style="margin-bottom : 6em;"></p>
          <h1>A fairy tale of zlib/zip <br/> compression in OpenJDK</h1>
          <p>
            Volker Simonis (<a href="https://twitter.com/volker_simonis">@volker_simonis</a>)<br/>
            Principal Software Engineer<br/>
            AWS
          </p>
        </section>

        <section data-background="images/background_default.jpg">
          <h1>About me</h1>

          <ul class="before" data-header="Present:" style="width: 60%;">
            <li>Principal Software Engineer @ Amazon Corretto</li>
            <li>OpenJDK Member, Committer &amp; Reviewer</li>
            <li>OpenJDK Build, Hotspot, Porters &amp; Vulnerability Group</li>
            <li>OpenJDK Governing Board</li>
            <li>Java Community Process Executive Committee</li>
          </ul>

          <ul class="before" data-header="Past:" style="width: 60%;">
            <li>SAP JVM and SapMachine @ SAP</li>
            <li>OpenJDK Build PowerPC/AIX &amp; s390x Project Lead </li>
            <li>JCP Expert Groups for Java SE 9 to 13</li>
            <li class="fragment"><a href="https://events.eclipse.org/2011/europe/">EclipseCon 2011</a>:
              <a href="http://www.progdoc.de/papers/EclipseCon2011/EclipseCon2011.html">How to Contribute to the OpenJDK</a>
            </li>
          </ul>
        </section>

        <section data-background="images/background_default.jpg">
          <h1>About zlib/zip/Deflate</h1>

          <ul>
            <li>Deflate: compression algorithm (<a href="https://www.rfc-editor.org/rfc/rfc1951">RFC 1951</a>)
              <ul>
                <li>Uses LZ77 (Lempel-Zip) and Huffman Coding</li>
              </ul>
            </li>
            <li class="fragment">zlib (<a href="https://www.zlib.net/">https://www.zlib.net</a>):
              <ul>
                <li>Library by Jean-loup Gailly &amp; Mark Adler (1995)</li>
                <li>Compressed data format (<a href="https://www.rfc-editor.org/rfc/rfc1950">RFC 1950</a>)
                  <ul>
                    <li>Deflate stream with Adler32 checksum)</li>
                  </ul>
                </li>
              </ul>
            </li>
            <li class="fragment">Gzip: compressed file format, single file (<a href="https://www.rfc-editor.org/rfc/rfc1952">RFC 1952</a>)
              <ul>
                <li>Uses Deflate compression and CRC32 checksum</li>
              </ul>
            </li>
            <li class="fragment">Zip: compressed file format, multiple files
              <ul>
                <li>Supports additionl compression algorithms</li>
              </ul>
            </li>
          </ul>
        </section>

        <section>

          <section data-background="images/background_default.jpg">
            <h1>zlib/zip in Java&#8482;</h1>

            <ul class="before" data-header="JDK 1.0 (1996):" style="width: 60%;">
              <li>Supported class loading from <em>uncompressed</em> zip files</li>
            </ul>
            <ul class="before fragment" data-header="JDK 1.1 (1997):" style="width: 60%;">
              <li>Support for compressed zip files</li>
              <li>Introduced the <code>java.util.zip</code> package
                <ul>
                  <li>Implemented with JNI wrapper on top of zlib 1.0.4</li>
                </ul>
              </li>
              <li>Introduced the JAR file format</li>
            </ul>
            <ul class="before fragment" data-header="JDK 1.2 (1998):" style="width: 60%;">
              <li>Added the <code>java.util.jar</code> package</li>
            </ul>
            <ul class="before fragment" data-header="JDK 7 (2011):" style="width: 60%;">
              <li>Added <a href="https://docs.oracle.com/javase/7/docs/technotes/guides/io/fsp/zipfilesystemprovider.html">Zip File System Provider</a>
                (<a href="https://bugs.openjdk.org/browse/JDK-6990846">JDK-6990846</a>)</li>
            </ul>
          </section>

          <section data-background="images/background_default.jpg">
            <h1>zlib/zip in Java&#8482;</h1>

            <div style="display: inline-block;">
            <p style="padding: 0 15px; text-align: left;">Changelog from a <a href="https://www.oracle.com/java/technologies/oracle-java-archive-downloads.html">historic JDK version</a>:</p>

            <pre class="big noshadow" data-trim="true">
              <code style="background: #93a1a1; color: #000;" class="text" data-trim="true" data-noescape="true">
Changes from <mark class="border">JDK 1.1beta3 to JDK 1.1_Final</mark>
...
JAR CHANGE - Can now handle compressed JAR files in the CLASSPATH

java.util.zip.ZipFile was enhanced so that it can now handle
compressed ZIP/JAR file entries. No changes to the API were made.
With this change, compressed JAR/ZIP files can now be handled
by javac.

Additionally, the runtime has also changed so that it can now
handle compressed ZIP/JAR files that are specified in the CLASSPATH.
              </code>
            </pre>
            </div>
          </section>

        </section>

        <section data-background="images/background_default.jpg">
          <h1>Deflate / LZ77</h1>

          <ul style="list-style-type: none;">
            <li style="margin-bottom: 1ex;">Dictionary based, sliding window (32k) compression</li>
            <li class="fragment" data-fragment-index="1">Example 1:<br/>
              <pre class="big noshadow" data-trim="true">
                <code class="cpp" data-trim="true" data-noescape="true">
<span class="fragment" data-fragment-index="1"> input: <span class="fragment highlight-current-border" data-fragment-index="5">bla</span>bla!                              
        <span class="fragment current-visible" data-fragment-index="2">^</span><span class="fragment current-visible" data-fragment-index="3">^</span><span class="fragment current-visible" data-fragment-index="4">^</span><span class="fragment current-visible" data-fragment-index="5">^</span>  <span class="fragment current-visible" data-fragment-index="6">^</span>
<span class="fragment" data-fragment-index="1">output: </span><span class="fragment" data-fragment-index="2">b</span><span class="fragment" data-fragment-index="3">l</span><span class="fragment" data-fragment-index="4">a</span><span class="fragment" data-fragment-index="5">[3,3]</span><span class="fragment" data-fragment-index="6">!</span></span>
                </code>
              </pre>
            </li>
            <li class="fragment" data-fragment-index="7">Example 2 (only match patterns >= 3):<br/>
              <pre class="big noshadow" data-trim="true">
                <code class="cpp" data-trim="true" data-noescape="true">
 input: <span class="fragment highlight-current-border" data-fragment-index="14">a<span class="fragment highlight-current-border" data-fragment-index="11">bc</span></span>bcdabcda                          
        <span class="fragment current-visible" data-fragment-index="8">^</span><span class="fragment current-visible" data-fragment-index="9">^</span><span class="fragment current-visible" data-fragment-index="10">^</span><span class="fragment current-visible" data-fragment-index="11">^</span><span class="fragment current-visible" data-fragment-index="12">^</span><span class="fragment current-visible" data-fragment-index="13">^</span><span class="fragment current-visible" data-fragment-index="14">^</span><span class="fragment current-visible" data-fragment-index="15">  ^</span><span class="fragment current-visible" data-fragment-index="16">^</span>
output: <span class="fragment" data-fragment-index="8">a</span><span class="fragment" data-fragment-index="9">b</span><span class="fragment" data-fragment-index="10">c</span><span class="fragment" data-fragment-index="11">b</span><span class="fragment" data-fragment-index="12">c</span><span class="fragment" data-fragment-index="13">d</span><span class="fragment" data-fragment-index="14">[6,3]</span><span class="fragment" data-fragment-index="15">d</span><span class="fragment" data-fragment-index="16">a</span>
                </code>
              </pre>
            </li>
            <li class="fragment" data-fragment-index="17">Example 3 (ambiguous matches):<br/>
              <pre class="big noshadow" data-trim="true">
                <code class="cpp" data-trim="true" data-noescape="true">
 input: <span class="fragment highlight-current-border" data-fragment-index="24">a<span class="fragment highlight-current-border" data-fragment-index="21">bc</span></span>bcda<span class="fragment highlight-current-border red" data-fragment-index="24"><span class="fragment highlight-current-border" data-fragment-index="25">bcda</span></span>                          
        <span class="fragment current-visible" data-fragment-index="18">^</span><span class="fragment current-visible" data-fragment-index="19">^</span><span class="fragment current-visible" data-fragment-index="20">^</span><span class="fragment current-visible" data-fragment-index="21">^</span><span class="fragment current-visible" data-fragment-index="22">^</span><span class="fragment current-visible" data-fragment-index="23">^</span><span class="fragment current-visible" data-fragment-index="24">^</span><span class="fragment current-visible" data-fragment-index="25">^</span>
output: <span class="fragment" data-fragment-index="18">a</span><span class="fragment" data-fragment-index="19">b</span><span class="fragment" data-fragment-index="20">c</span><span class="fragment" data-fragment-index="21">b</span><span class="fragment" data-fragment-index="22">c</span><span class="fragment" data-fragment-index="23">d</span><span class="fragment" data-fragment-index="24">a</span><span class="fragment" data-fragment-index="25">[4,4]</span>
                </code>
              </pre>
            </li>
          </ul>
<!--
<![CDATA[

 input: blabla!
        ^^^^  ^
output: bla[3,3]!

 input: abcbcdabcda
        ^^^^^^^  ^
output: abcbcd[6,3]da

 input: abcbcdabcda
        ^^^^^^^^
output: abcbcda[4,4]

]]>
-->
        </section>

        <section data-background="images/background_default.jpg">
          <h1>Deflate / Huffmann Coding</h1>
        </section>

        <section>

          <section data-background="images/background_default.jpg">
            <h2>Deflate Performance - 2020 vs. 2022</h2>

            <object data="images/i7-8650U-1900MHz-deflate-silesia-2020-09-16-file-deflate-silesia-horizontal-part2.svg"
                    type="image/svg+xml" style="width: 90%;">&nbsp;</object>

            <object data="images/i7-8650U-1900MHz-deflate-silesia-2022-10-21-file-deflate-silesia-horizontal-part2.svg"
                    type="image/svg+xml" style="width: 90%;">&nbsp;</object>
          </section>

          <section data-background="images/background_default.jpg">
            <h2>Deflate Performance - Compression vs. Throughput (mozilla)</h2>

            <object data="images/i7-8650U-1900MHz-deflate-silesia-2022-10-21-ratio-silesia-mozilla.svg"
                    type="image/svg+xml" style="height: 90%;">&nbsp;</object>
          </section>

          <section data-background="images/background_default.jpg">
            <h2>Deflate Performance - Compression vs. Throughput (xml)</h2>

            <object data="images/i7-8650U-1900MHz-deflate-silesia-2022-10-21-ratio-silesia-xml.svg"
                    type="image/svg+xml" style="height: 90%;">&nbsp;</object>
          </section>

        </section>

        <section data-background="images/background_default.jpg">
          <h2>Inflate Performance - 2020 vs. 2022</h2>

          <object data="images/i7-8650U-1900MHz-inflate-silesia-2020-09-16-file-inflate-silesia-horizontal-part2.svg"
                  type="image/svg+xml" style="width: 90%;">&nbsp;</object>

          <object data="images/i7-8650U-1900MHz-inflate-silesia-2022-10-21-file-inflate-silesia-horizontal-part2.svg"
                  type="image/svg+xml" style="width: 90%;">&nbsp;</object>
        </section>

        <section data-background="images/background_default.jpg">
          <h1>References</h1>

          <ul>
            <li><a href="https://www.rfc-editor.org/rfc/rfc1950">RFC 1950: ZLIB Compressed Data Format Specification version 3.3</a></li>
            <li><a href="https://www.rfc-editor.org/rfc/rfc1951">RFC 1951: DEFLATE Compressed Data Format Spec. vers. 1.3</a></li>
            <li><a href="https://www.rfc-editor.org/rfc/rfc1952">RFC 1952: GZIP file format fpec. vers. 4.3</a></li>
            <li><a href="https://zlib.net/feldspar.html">An explanation of the Deflate algorithm</a></li>
            <li><a href="https://www.hanshq.net/zip.html">Zip Files: History, Explanation and Implementation</a></li>
            <li><a href="https://www.sobyte.net/post/2022-01/gzip-and-deflate/">Gzip format and DEFLATE compression algorithm</a></li>
            <li><a href="https://www.euccas.me/zlib/">Understanding zlib</a></li>
            <li><a href="https://ieeexplore.ieee.org/document/6824430">A fast implemenation of Deflate</a></li>
            <li><a href="https://www.intel.com/content/dam/www/public/us/en/documents/white-papers/zlib-compression-whitepaper-copy.pdf">
                High Performance ZLIB compression on Intel Architecture Processors</a></li>
            <li><a href="https://pkware.cachefly.net/webdocs/casestudies/APPNOTE.TXT">
                ZIP File Format Specification</a></li>
          </ul>
        </section>

        <section data-background="images/background_last.jpg">
          <h2 style="text-transform: none;">
            <a href="https://simonis.github.io/ZlibFairyTale" style="color: inherit;">https://simonis.github.io/ZlibFairyTale</a>
          </h2>
        </section>

      </div>

    </div>

    <script src="reveal.js/lib/js/head.min.js"></script>
    <script src="reveal.js/js/reveal.js"></script>

    <script>

      // Full list of configuration options available at:
      // https://github.com/hakimel/reveal.js#configuration
      Reveal.initialize({
        //width: 1024,
        //height: 768,
        //width: 1280,
        //height: 720,
        //width: 1366,
        //height: 768,
        width: 1920,
        height: 1080,
        margin: 0.1,
        controls: true,
        progress: true,
        history: true,
        center: true,
        slideNumber: true,

        transition: 'none', // none/fade/slide/convex/concave/zoom

        // Optional reveal.js plugins
        dependencies: [
          { src: 'reveal.js/lib/js/classList.js', condition: function() { return !document.body.classList; } },
          { src: 'reveal.js/plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
          { src: 'reveal.js/plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },
          { src: 'reveal.js/plugin/highlight/highlight.js', async: true, condition: function() { return !!document.querySelector( 'pre code' ); }, callback: function() {

hljs.registerLanguage('terminal', function(hljs) {
  return {
    contains: [
      hljs.C_LINE_COMMENT_MODE,
      {
        className: 'title',
        lexemes: /[$()>_a-zA-Z0-9]+/,
        keywords: "$ (gdb) hsdb>",
        begin: /^\$ |\(gdb\)|hsdb> /,
        end: /[^\\]\n/,
	contains: [
          hljs.COMMENT('//', '$', { endsParent: true })
	]
      }
    ]
  }
});

hljs.initHighlightingOnLoad(); } },
          { src: 'reveal.js/plugin/zoom-js/zoom.js', async: true },
          { src: 'reveal.js/plugin/notes/notes.js', async: true }
        ]
      });

      //Reveal.configure({ slideNumber: true });



<![CDATA[

      // This function was adapted from:
      // Titus Cieslewski (https://stackoverflow.com/users/796329/titus-cieslewski) and
      // Dan Harper (https://stackoverflow.com/users/148975/danharper) from:
      // https://stackoverflow.com/questions/808826/draw-arrow-on-canvas-tag
      function canvas_arrow(context, fromx, fromy, tox, toy){
        var headlen = 10;   // length of head in pixels
        var angle = Math.atan2(toy-fromy,tox-fromx);
        context.lineCap = 'round';
        context.moveTo(fromx, fromy);
        context.lineTo(tox, toy);
        context.moveTo(tox, toy);
        context.lineTo(tox-headlen*Math.cos(angle-Math.PI/6),toy-headlen*Math.sin(angle-Math.PI/6));
        context.moveTo(tox, toy);
        context.lineTo(tox-headlen*Math.cos(angle+Math.PI/6),toy-headlen*Math.sin(angle+Math.PI/6));
      }

      function drawArrow(canvas, from, target, color) {
        var ctx = canvas.getContext("2d");
        ctx.lineWidth = 3;
        ctx.strokeStyle= color;
        var x1, y1, x2, y2;
        if ((from.offsetTop + from.offsetHeight) < (target.offsetTop)) {
          // 'from' above 'target'
          if ((from.offsetLeft + from.offsetWidth) < (target.offsetLeft)) {
            // 'from' feft of 'target'
            x1 = from.offsetLeft + from.offsetWidth;
            y1 = from.offsetTop + from.offsetHeight;
            x2 = target.offsetLeft;
            y2 = target.offsetTop;
          }
          else if ((from.offsetLeft) > (target.offsetLeft + target.offsetWidth)) {
            // 'from' right of 'target'
            x1 = from.offsetLeft;
            y1 = from.offsetTop + from.offsetHeight;
            x2 = target.offsetLeft + target.offsetWidth;
            y2 = target.offsetTop;
          }
          else {
            x1 = from.offsetLeft + (from.offsetWidth / 2);
            y1 = from.offsetTop + from.offsetHeight;
            x2 = target.offsetLeft + (target.offsetWidth / 2);
            y2 = target.offsetTop;
          }
        }
        else if ((from.offsetTop) > (target.offsetTop + target.offsetHeight)) {
          // 'from' below 'target'
          if ((from.offsetLeft + from.offsetWidth) < (target.offsetLeft)) {
            // 'from' feft of 'target'
            x1 = from.offsetLeft + from.offsetWidth;
            y1 = from.offsetTop;
            x2 = target.offsetLeft;
            y2 = target.offsetTop + target.offsetHeight;
          }
          else if ((from.offsetLeft) > (target.offsetLeft + target.offsetWidth)) {
            // 'from' right of 'target'
            x1 = from.offsetLeft;
            y1 = from.offsetTop;
            x2 = target.offsetLeft + target.offsetWidth;
            y2 = target.offsetTop + target.offsetHeight;
          }
          else {
            x1 = from.offsetLeft + (from.offsetWidth / 2);
            y1 = from.offsetTop;
            x2 = target.offsetLeft + (target.offsetWidth / 2);
            y2 = target.offsetTop + target.offsetHeight;
          }
        }
        else if ((from.offsetLeft) < (target.offsetLeft)) {
          // 'from' feft of 'target'
          x1 = from.offsetLeft + from.offsetWidth;
          y1 = from.offsetTop + (from.offsetHeight / 2);
          x2 = target.offsetLeft;
          y2 = target.offsetTop + (target.offsetHeight / 2);
        }
        else {
          // 'from' right of 'target'
          x1 = from.offsetLeft;
          y1 = from.offsetTop + (from.offsetHeight / 2);
          x2 = target.offsetLeft + target.offsetWidth;
          y2 = target.offsetTop + (target.offsetHeight / 2);
        }
        ctx.beginPath();
        ctx.moveTo(x1, y1);
        //ctx.bezierCurveTo(30,60,40,100, 50,120);
        ctx.lineTo(x2, y2);
        canvas_arrow(ctx, x1, y1, x2, y2);
        ctx.stroke();
      }

      function handleFragmentEvent(fragments, current, show) {
        var code = current.parentNode;
        var firstArrow = true;
        var fragmentShown = false;

        var canvas, canvases = code.getElementsByTagName("canvas");
        if (canvases.length != 0) {
          canvas = canvases[0];
          canvas.getContext("2d").clearRect(0, 0, canvas.width, canvas.height);
        }
        fragments.forEach(function(fragment, i) {
          if (show === false && current === fragment) fragmentShown = true;
          var cll = fragment.classList;
          if (((cll.contains("highlight-border") && !fragmentShown) ||
               (cll.contains("highlight-current-border") && cll.contains("current-fragment"))) &&
              fragment.hasAttribute("arrow-to")) {

            var target = document.getElementById(fragment.getAttribute("arrow-to"));
            if (canvases.length === 0) {
              canvas = document.createElement("canvas");
              // Place the canvas right over the parent node ..
              canvas.style.position= 'absolute';
              canvas.style.zIndex= '100';
              canvas.style.top= '0px';
              canvas.style.left= '0px';
              // .. and make it the same size.
              canvas.style.width= code.offsetWidth + 'px';
              canvas.style.height= code.offsetHeight + 'px';
              // Make the canvas bounding box (i.e. canvas' css dimensions)
              // and the canvas logical size be the same. That way we don't
              // have to convert between the two coordinate systems of the
              // elemnts on the overlaying DOM element and the canvas.
              canvas.width= code.offsetWidth;
              canvas.height= code.offsetHeight;
              code.appendChild(canvas);
            }
            drawArrow(canvas, fragment, target, "#1b91ff");
          }
          if (show === true && current === fragment) fragmentShown = true;
        });
      }

      Reveal.addEventListener('fragmenthidden', function(event) {
        handleFragmentEvent(event.allFragments, event.fragments[0], false);
      });

      Reveal.addEventListener('fragmentshown', function(event) {
        handleFragmentEvent(event.allFragments, event.fragments[event.fragments.length - 1], true);
      });


]]>
    </script>

  </body>
</html>
